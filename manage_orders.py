# %%import timefrom configs.api_configs import create_client_objectfrom manag_orders_class import ManagOrdersconfigs_path = './configs/init_configs.json'mo = ManagOrders()initConfigs = mo.get_initConfigs(initConfigs_path=configs_path)client = create_client_object(keys_path=initConfigs.keys_path,                              configs_name=initConfigs.configs_name,                              is_demo=initConfigs.is_demo)real_open_sell_counter = 0while initConfigs.manage_orders:    initConfigs = mo.get_initConfigs(initConfigs_path=configs_path)    try:        # 1 get all open orders        open_buy_and_sell, number_of_open_orders = mo.get_open_orders(client=client,                                                                      symbol=initConfigs.symbol,                                                                      timeout=initConfigs.timeout)        open_buy, open_buy_number, open_sell, open_sell_number = mo.sell_buy_open(open_buy_and_sell)        print(f"\nnumber of open orders BUY  = {open_buy_number}")        print(f"number of open orders SELL = {open_sell_number}")        open_sell_counter: int = mo.get_filled_counter(counter_path=initConfigs.counter_path)        # If number of opens, buy + sell >= max open threshold -> stop !        if open_buy_number + open_sell_counter >= initConfigs.max_orders:            print(open_buy_number , open_sell_counter ,initConfigs.max_orders)            mo.place_order_switch(place_order=False,                                  manage_orders_path=initConfigs.manage_orders_path)            current_open_max_diff = number_of_open_orders - initConfigs.max_orders            if (current_open_max_diff > 0) and (open_buy_number > 0):                tail_length = min([current_open_max_diff, open_buy_number])                print('cancel_tail_of_open_buy_orders')                mo.cancel_tail_of_open_buy_orders(client=client,                                                  tail_length=tail_length,                                                  open_buy=open_buy,                                                  symbol=initConfigs.symbol,                                                  number_of_open_orders=number_of_open_orders)        else:            mo.place_order_switch(place_order=True,                                  manage_orders_path=initConfigs.manage_orders_path)  # cancel old orders            # correct difference between local sell counter and server sell counter            if real_open_sell_counter > 100:                print(f'open_sell_number = {open_sell_number}')                print(f'open_sell_counter = {open_sell_counter}\n\n\n\n')                try:                    counter = mo.reset_counter(counter_path=initConfigs.counter_path,                                               new_counter_value=open_sell_number)                    real_open_sell_counter = 0                except:                    print('didnt updated counter')            elif open_sell_counter != open_sell_number:                real_open_sell_counter += 1                if real_open_sell_counter % 10 == 0:                    print(f'real_open_sell_counter = {real_open_sell_counter}')            else:                real_open_sell_counter = 0        mo.cancel_old_buy_order(client=client,                                symbol=initConfigs.symbol,                                open_buy=open_buy,                                order_life_time=initConfigs.order_life_time)    except:        print('133 - something went wrong taking 3 second of sleep')        time.sleep(2)        try:            client = create_client_object(keys_path=initConfigs.keys_path,                                          configs_name=initConfigs.configs_name,                                          is_demo=initConfigs.is_demo)        except:            print("client didnt restarted")